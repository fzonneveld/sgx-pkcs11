enclave {

from "sgx_tsgxssl.edl" import *;

	trusted {
		public int SGXgenerateKeyPair(
			[out, count=pubKeyLength]uint8_t* RSAPublicKey,
            size_t pubKeyLength,
            [user_check]size_t *pubKeyLengthOut,

            [user_check]uint8_t *pubSerializedAttr,
			size_t pubSerializedAttrLen,
			[user_check] size_t *pubSerializedAttrLenOut,

			[out, count=privateKeyLength]uint8_t* RSAPrivateKey,
            size_t privateKeyLength,
			[user_check] size_t *privateKeyLengthOut,

            [user_check]uint8_t *privSerializedAttr,
			size_t privSerializedAttrLen,
			[user_check] size_t *privSerializedAttrLenOut
		);

		public int SGXEncrypt(
            [in, readonly, count=public_key_length]const uint8_t* public_key, size_t public_key_length,
            [in, readonly, count=plaintext_length]const uint8_t* plaintext, size_t plaintext_length,
            [out, count=ciphertext_length]uint8_t* ciphertext, size_t ciphertext_length,
            [user_check]size_t* cipherTextLength
		);

		public int SGXDecrypt(
            [in, readonly, count=private_key_ciphered_length]const unsigned char* private_key_ciphered,
            size_t private_key_ciphered_length,
            [in, readonly, count=private_key_ciphered_length]const unsigned char* pSerializedAttr,
            size_t serializedAttrLen,
            [in, readonly, count=ciphertext_length]const unsigned char* ciphertext,
            size_t ciphertext_length,
            [out, count=plaintext_length]unsigned char* plaintext,
            size_t plaintext_length,
            [user_check]size_t* plainTextLength
		);

        public int SGXGenerateRandom(
            [out, count=random_length]unsigned char* random,
            size_t random_length
        );

        // Root Key Handling functions....
        public int SGXGenerateRootKey(
            [out, count=root_key_length] uint8_t *rootkeySealed,
            size_t root_key_length,
            [user_check]size_t* rootKeyLength
        );

        public int SGXGetSealedRootKeySize(
			[user_check]size_t *rootKeyLength
		);

        public int SGXSetRootKeySealed(
            [in, readonly, count=root_key_len_sealed]const uint8_t *root_key_sealed,
            size_t root_key_len_sealed
        );
        public int SGXGetRootKeySealed(
            [out, count=root_key_len_sealed]uint8_t *root_key_sealed,
            size_t root_key_len_sealed,
            [user_check]size_t* rootKeyLenSealed
        );
		public int SGXSetRootKeyShare(
			int x,
            [in, readonly, count=y_length]const uint8_t *y,
			size_t  y_length,
			int threshold
		);
    };

    untrusted {
        [cdecl] int pthread_wait_timeout_ocall (unsigned long long waiter, unsigned long long timeout);
        [cdecl] int pthread_create_ocall(unsigned long long self);
        [cdecl] int pthread_wakeup_ocall(unsigned long long waiter);
    };
};
